#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-10T22:27:39
* Description
  source: https://leetcode.com/problems/reverse-integer/

  Given a signed 32-bit integer =x=, return =x= with its digits reversed. If reversing =x= causes the value to go outside the signed 32-bit integer range =[-2^31, 2^31 - 1]=, then return =0=.

  *Assume the environment does not allow you to store 64-bit integers (signed or unsigned).*

  Example 1:

  #+begin_example
  Input: x = 123
  Output: 321
  #+end_example

  Example 2:

  #+begin_example
  Input: x = -123
  Output: -321
  #+end_example

  Example 3:

  #+begin_example
  Input: x = 120
  Output: 21
  #+end_example

  *Constraints*:

  + ~-2^31 <= x <= 2^31 - 1~
* Solution
  #+begin_src c++
    #include <cmath>
    class Solution {
    public:
      int reverse(int x) {
	long reversed = 0;
	long min = -std::pow(2, 31);
	long max = std::pow(2, 31) - 1;

	while (x % 10 != x) {
	  reversed = reversed * 10 + (x % 10);
	  x = x / 10;
	  // fast return; reduce unnecessary calculation
	  if (reversed < min || reversed > max) {
	    return 0;
	  }
	}

	reversed = reversed * 10 + x;
	// check if reversed is overflowed
	if (reversed < min || reversed > max) {
	  return 0;
	}
	return reversed;
      }
    };
  #+end_src
