#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-27T16:05:11

Given an array of integers =nums= sorted in ascending order, find the starting and ending position of a given =target= value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return =[-1, -1]=.

*Example 1*:

#+BEGIN_EXAMPLE

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

#+END_EXAMPLE

*Example 2*:

#+BEGIN_EXAMPLE
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
#+END_EXAMPLE

#+BEGIN_SRC python
  # Runtime: 80 ms, faster than 95.74% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.
  # time complexity: O(2*logn)->O(logn), 2 is because we search twice.
  # space complexity: O(1)
  class Solution:
      def searchRange(self, nums: List[int], target: int) -> List[int]:
	  if len(nums) == 0:
	      return [-1,-1]
	  # 找出最左边等于target的元素的位置
	  binarySearchLeft = lambda x,y: x<y
	  # 找出最左边大于target的元素的位置 x, 若 nums[x] 刚大于target, 那么
	  # nums[x-1] 就是最右边等于target的元素.
	  binarySearchRight = lambda x,y: x<=y
	  def binarySearch(condition)->int:
	      low = 0
	      high = len(nums)
	      while low < high:
		  mid = (low+high) // 2
		  if condition(nums[mid],target):
		      low = mid + 1
		  else:
		      high = mid
	      return low
	  first = binarySearch(binarySearchLeft)
	  last = binarySearch(binarySearchRight) - 1
	  return [first, last] if first<len(nums) and nums[first] == target else [-1,-1]
#+END_SRC
