#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-24T21:45:43
source: https://leetcode.com/problems/add-two-numbers/

You are given two *non-empty* linked lists representing two non-negative integers. The digits are stored in *reverse order* and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

#+begin_example
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
#+end_example

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  # Runtime: 72 ms, faster than 62.00% of Python3 online submissions for Add Two Numbers.
  # time complexity: O(n1+n2), n1 is the length of l1, n2 is the length of l2
  # space complexity: O(max(n1,n2)), the length of sum of two number equals the larger's


  class Solution:
      def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
	  num1 = self.getNumber(l1)
	  num2 = self.getNumber(l2)
	  result = num1+num2
	  return self.constructNumber(result)

      def getNumber(self, llist: ListNode) -> int:
	  num = ""
	  while llist:
	      num = str(llist.val) + num
	      llist = llist.next
	  return int(num)

      def constructNumber(self, num: int) -> ListNode:
	  print(num)
	  input = str(num)
	  parent = root = None
	  while len(input) > 0:
	      val = input[len(input)-1]
	      newNode = ListNode(int(val))
	      if not parent:
		  parent = newNode
		  root = parent
	      else:
		  parent.next = newNode
		  parent = newNode
	      input = input[:len(input)-1]
	  return root

#+end_src
