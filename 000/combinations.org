#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-25T23:20:41
source: https://leetcode.com/problems/combinations/

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

#+begin_example
Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
#+end_example

#+begin_src python
  from typing import List


  # Runtime: 864 ms, faster than 7.55% of Python3 online submissions for Combinations.
  # time complexity: O(N!), N is the length of n
  # space complexity: O(C!), C is the size of combination
  class Solution:
      def combine(self, n: int, k: int) -> List[List[int]]:
	  output: List[List[int]] = []

	  def backtracking(start: int, combination: List[int]) -> None:
	      if len(combination) == k:
		  output.append(combination.copy())
	      for i in range(start, n+1):
		  if i not in set(combination):
		      backtracking(i+1, combination+[i])
	  backtracking(1, [])
	  return output

#+end_src
