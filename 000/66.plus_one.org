#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-02T14:53:31
* Description
  source: https://leetcode.com/problems/plus-one/

  You are given a *large integer* represented as an integer array =digits=, where each =digits[i]= is the =ith= digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading =0'= s.

  Increment the large integer by one and return the resulting array of digits.

  Example 1:

  #+begin_example
  Input: digits = [1,2,3]
  Output: [1,2,4]
  Explanation: The array represents the integer 123.
  Incrementing by one gives 123 + 1 = 124.
  Thus, the result should be [1,2,4].
  #+end_example

  Example 2:

  #+begin_example
  Input: digits = [4,3,2,1]
  Output: [4,3,2,2]
  Explanation: The array represents the integer 4321.
  Incrementing by one gives 4321 + 1 = 4322.
  Thus, the result should be [4,3,2,2].
  #+end_example

  Example 3:

  #+begin_example
  Input: digits = [9]
  Output: [1,0]
  Explanation: The array represents the integer 9.
  Incrementing by one gives 9 + 1 = 10.
  Thus, the result should be [1,0].
  #+end_example


  *Constraints*:

  - 1 <= digits.length <= 100
  - 0 <= digits[i] <= 9
  - digits does not contain any leading 0's.
* Solution
#+begin_src c++
  class Solution {
  public:
      vector<int> plusOne(vector<int>& digits) {
	  int carry = 0;
	  int plus = 1;
	  for(int i = digits.size() - 1; i >= 0 ; i-- ){
	      int result = digits[i] + plus;
	      result = result % 10;
	      digits[i] = result;
	      if(0 == result){
		  plus = 1;
	      } else{
		  plus = 0;
		  break;
	      }
            
	  }
        
	  // handle the carry
	  if(1 == plus){
	      digits.insert(digits.begin(), 1);
	  }
        
	  return digits;
      }
  };
#+end_src
