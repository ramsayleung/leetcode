#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-12T10:56:19
* Description
  source: https://leetcode.com/problems/string-to-integer-atoi/

  Implement the =myAtoi(string s)= function, which converts a string to a 32-bit signed integer (similar to C/C++'s =atoi= function).

  The algorithm for =myAtoi(string s)= is as follows:

  - Read in and ignore any leading whitespace.
  - Check if the next character (if not already at the end of the string) is ='-'= or ='+'=. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
  - Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
  - Convert these digits into an integer (i.e. ="123" -> 123=, ="0032" -> 32=). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
  - If the integer is out of the 32-bit signed integer range =[-2^31, 2^31 - 1]=, then clamp the integer so that it remains in the range. Specifically, integers less than =-2^31= should be clamped to -231, and integers greater than =2^31 - 1= should be clamped to =2^31 - 1=.
  - Return the integer as the final result.

  *Note*:

  - Only the space character ' ' is considered a whitespace character.
  - *Do not ignore* any characters other than the leading whitespace or the rest of the string after the digits.



  Example 1:

  #+begin_example
  Input: s = "42"
  Output: 42
  Explanation: The underlined characters are what is read in, the caret is the current reader position.
  Step 1: "42" (no characters read because there is no leading whitespace)
	   ^
  Step 2: "42" (no characters read because there is neither a '-' nor '+')
	   ^
  Step 3: "42" ("42" is read in)
	     ^
  The parsed integer is 42.
  Since 42 is in the range [-231, 231 - 1], the final result is 42.
  #+end_example

  Example 2:

  #+begin_example
  Input: s = "   -42"
  Output: -42
  Explanation:
  Step 1: "   -42" (leading whitespace is read and ignored)
	      ^
  Step 2: "   -42" ('-' is read, so the result should be negative)
	       ^
  Step 3: "   -42" ("42" is read in)
		 ^
  The parsed integer is -42.
  Since -42 is in the range [-231, 231 - 1], the final result is -42.
  #+end_example

  Example 3:

  #+begin_example
  Input: s = "4193 with words"
  Output: 4193
  Explanation:
  Step 1: "4193 with words" (no characters read because there is no leading whitespace)
	   ^
  Step 2: "4193 with words" (no characters read because there is neither a '-' nor '+')
	   ^
  Step 3: "4193 with words" ("4193" is read in; reading stops because the next character is a non-digit)
	       ^
  The parsed integer is 4193.
  Since 4193 is in the range [-231, 231 - 1], the final result is 4193.
  #+end_example



  *Constraints*:

  - =0 <= s.length <= 200=
  - =s= consists of English letters (lower-case and upper-case), digits (=0-9=), =' '=, ='+'=, ='-'=, and ='.'=.
* Solution
  #+begin_src c++
    class Solution {
    public:
      int myAtoi(string s) {
	int size = s.size();
	auto p_tr = s.c_str();
	int min_value = - std::pow(2, 31);
	int max_value = std::pow(2, 31) - 1;

	// remove whitespace
	int valid_index = 0;
	while(valid_index < size){
	  if (p_tr[valid_index] == ' '){
	    valid_index ++;
	  }else{
	    break;
	  }
	}

	// check the final result is negative or positive
	int signal = 1;
	if(p_tr[valid_index] == '-' || p_tr[valid_index] == '+'){
	  signal = p_tr[valid_index] == '-'? -1: 1;
	  valid_index ++;
	}

	// calculate the final result
	long result = 0;
	for(int i = valid_index; i < size; i ++){
	  if (p_tr[i] >= '0' and p_tr[i] <= '9'){
	    result = result * 10 + (p_tr[i] - '0');

	    // check if final result is in valid range
	    if(result * signal < min_value || result * signal > max_value){
	      return result * signal < min_value? min_value: max_value;
	    }
	  }
	  else{
	    break;
	  }
	}

	return result * signal;
      }
    };
  #+end_src
