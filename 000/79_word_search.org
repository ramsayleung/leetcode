#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-05-14 六 16:07
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/000
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-05-14 六 16:07]
#+TITLE: 79. Word Search
#+HUGO_WEIGHT: 79

* Description
  source: https://leetcode.com/problems/word-search/

  Given an ~m x n~ grid of characters ~board~ and a string ~word~, return ~true~ if ~word~ exists in the grid.

  The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.


  *Example 1*:

  [[https://assets.leetcode.com/uploads/2020/11/04/word2.jpg]]

  #+begin_example
  Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
  Output: true
  #+end_example

  *Example 2*:

  [[https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg]]

  #+begin_example
  Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
  Output: true
  #+end_example

  *Example 3*:

  [[https://assets.leetcode.com/uploads/2020/10/15/word3.jpg]]

  #+begin_example
  Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
  Output: false
  #+end_example


  *Constraints*:

  - ~m == board.length~
  - ~n = board[i].length~
  - ~1 <= m, n <= 6~
  - ~1 <= word.length <= 15~
  - ~board~ and ~word~ consists of only lowercase and uppercase English letters.

  *Follow up*: Could you use search pruning to make your solution faster with a larger board?
* Solution
  #+begin_src C++
    class Solution {
    public:
	bool exist(vector<vector<char>>& board, string word) {
	    // Time complexity: O(m*n^2)
	    // Space complexity: O(1)
	    for(int i = 0; i < board.size(); i++){
		for(int j = 0; j< board[0].size(); j++){
		    if(backtrack(i,j,0,word,board)){
			return true;
		    }
		}
	    }
        
	    return false;
	}
    
	bool backtrack(int row, int col, int index, const std::string& word, vector<vector<char>>& board){
	    if(index >= word.size()){
		return true;
	    }
        
	    if(row < 0 || col < 0 || row > board.size() - 1 || col > board[0].size() - 1){
		return false;
	    }
        
	    if(word[index] != board[row][col]){
		return false;
	    }
        
	    // found
	    char original_val = board[row][col];
        
	    // To prevent the same letter cell being used more than once.
	    board[row][col] = '*';
        
	    bool found = backtrack(row + 1, col, index + 1, word, board) || // up
			 backtrack(row - 1, col, index + 1, word, board) || // down
			 backtrack(row, col + 1, index + 1, word, board) || // right
			 backtrack(row, col - 1, index + 1, word, board);   // left
	    board[row][col] = original_val;
	    return found;
	 }

    };
  #+end_src
