#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-16 六 08:57
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/000
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-16 六 08:57]
#+TITLE: 33. Search in Rotated Sorted Array
#+HUGO_WEIGHT: 33

* Description
  source: https://leetcode.com/problems/search-in-rotated-sorted-array/

  There is an integer array =nums= sorted in ascending order (with *distinct* values).

  Prior to being passed to your function, nums is *possibly rotated* at an unknown pivot index k (~1 <= k < nums.length~) such that the resulting array is ~[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]~ (*0-indexed*). For example, ~[0,1,2,4,5,6,7]~ might be rotated at pivot index ~3~ and become ~[4,5,6,7,0,1,2]~.

  Given the array ~nums~ after the possible rotation and an =integer=, return the index of =target= if it is in =nums=, or =-1= if it is not in =nums=.

  You must write an algorithm with =O(log n)= runtime complexity.

  *Example 1*:

  #+begin_example
  Input: nums = [4,5,6,7,0,1,2], target = 0
  Output: 4
  #+end_example

  *Example 2*:

  #+begin_example
  Input: nums = [4,5,6,7,0,1,2], target = 3
  Output: -1
  #+end_example

  *Example 3*:

  #+begin_example
  Input: nums = [1], target = 0
  Output: -1
  #+end_example
 

  *Constraints*:

  - ~1 <= nums.length <= 5000~
  - ~-10^4 <= nums[i] <= 10^4~
  - All values of nums are *unique*.
  - =nums= is an ascending array that is possibly rotated.
  - ~-10^4 <= target <= 10^4~
* Solution
  #+begin_src C++
    class Solution {
    public:
	int search(vector<int>& nums, int target) {
	    int low = 0;
	    int high = nums.size() - 1;
	    while(low <= high){
		int mid = (low + high) / 2;
		if(nums[mid] == target){
		    return mid;
		}
            
		// the left half is sorted
		if(nums[mid] >= nums[low]){
		    if(target <= nums[mid] && nums[low] <= target ){
			high = mid - 1;
		    }else{
			low = mid + 1;
		    }
		}else{
		    if(target <= nums[high] && nums[mid] <= target){
			low = mid + 1;
		    }else{
			high = mid - 1;
		    }
		}
	    }
        
	    return -1;
	}
    };
  #+end_src
