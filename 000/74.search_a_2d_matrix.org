#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-07T16:44:57
* Description
  source: https://leetcode.com/problems/search-a-2d-matrix/

  Write an efficient algorithm that searches for a value *target* in an *m x n* integer *matrix* matrix. This matrix has the following properties:

  - Integers in each row are sorted from left to right.
  - The first integer of each row is greater than the last integer of the previous row.

  Example 1:

  [[https://assets.leetcode.com/uploads/2020/10/05/mat.jpg]]

  #+begin_example
  Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
  Output: true
  #+end_example

  Example 2:

  [[https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg]]

  #+begin_example
  Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
  Output: false
  #+end_example

  *Constraints*:

  - ~m == matrix.length~
  - ~n == matrix[i].length~
  - ~1 <= m, n <= 100~
  - ~-10**4 <= matrix[i][j], target <= 10**4~
* Solution
  #+begin_src c++
    class Solution {
    public:
      bool searchMatrix(vector<vector<int>> &matrix, int target) {
	int closest_value_row = 0;
	int closest_value = 0x709394;

	// find the possible row of target
	int start = 0;
	int end = matrix.size() - 1;
	while (start <= end) {
	  int medium = (start + end) / 2;
	  if (matrix[medium][0] > target) {
	    end = medium - 1;
	  } else if (matrix[medium][0] < target) {
	    start = medium + 1;
	  } else {
	    closest_value_row = medium;
	    break;
	  }

	  if (target > matrix[medium][0] &&
	      target - matrix[medium][0] < closest_value) {
	    closest_value_row = medium;
	    closest_value = target - matrix[medium][0];
	  }
	}

        // search the possible row 
	start = 0;
	auto nums = matrix[closest_value_row];
	end = nums.size() - 1;
	while (start <= end) {
	  int medium = (start + end) / 2;
	  if (nums[medium] > target) {
	    end = medium - 1;
	  } else if (nums[medium] < target) {
	    start = medium + 1;
	  } else {
	    return true;
	  }
	}
	return false;
      }
    };
  #+end_src
