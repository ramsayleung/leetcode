#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-24T22:07:05
source: https://leetcode.com/problems/merge-k-sorted-lists/

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

#+begin_example
Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
#+end_example

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None
  from bisect import insort


  # Runtime: 124 ms, faster than 45.85% of Python3 online submissions for Merge k Sorted Lists.
  # time complexity: O(n), n is the number of all nodes.
  # space complexity: O(n), n is the size of `self.sorted`
  class Solution:
      def __init__(self):
	  self.sorted = []

      def mergeKLists(self, lists: List[ListNode]) -> ListNode:
	  for l in lists:
	      self.traversal(l)
	      parent = root = None
	  while len(self.sorted) > 0:
	      newNode = ListNode(self.sorted.pop(0))
	      if not parent:
		  parent = root = newNode
	      else:
		  parent.next = newNode
		  parent = parent.next
	  return root

      def traversal(self, link: ListNode) -> None:
	  while link:
	      insort(self.sorted, link.val)
	      link = link.next

#+end_src
