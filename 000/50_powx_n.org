#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-11T21:10:37
* Description
  source: https://leetcode.com/problems/powx-n/

  Implement ~pow(x, n)~, which calculates =x= raised to the power n (i.e., =x^n=).

  Example 1:

  #+begin_example
  Input: x = 2.00000, n = 10
  Output: 1024.00000
  #+end_example

  Example 2:

  #+begin_example
  Input: x = 2.10000, n = 3
  Output: 9.26100
  #+end_example

  Example 3:

  #+begin_example
  Input: x = 2.00000, n = -2
  Output: 0.25000
  Explanation: 2-2 = 1/22 = 1/4 = 0.25
  #+end_example

  *Constraints*:

  - ~100.0 < x < 100.0~
  - ~2^31 <= n <= 2^31-1~
  - ~10^4 <= xn <= 10^4~
* Solution
  #+begin_src c++
    #include <map>
    #include <string>
    class Solution {
    public:
      double myPow(double x, int n) {
	// use cache to reduce duplicated calculation
	std::string key = std::to_string(x) + "_" + std::to_string(n);
	auto iter = cal_cache.find(key);
	// match cache
	if(iter != cal_cache.end()){
	  return iter->second;
	}

	// Divide and Conquer
	int left = n / 2;
	int right = n - left;
	double result;
	if (n > 0){
	  if (n == 1){
	    result = x;
	  }else{
	    result = myPow(x, left) * myPow(x, right);
	  }

	} else if (n < 0){
	  if (n == -1 ){
	    result = 1/ x;
	  }else{
	    result = myPow(x, left) * myPow(x, right);
	  }
	} else{
	  result = 1;
	}

	// cache the result
	cal_cache[key] = result;
	return result;

      }
    private:
      std::map<std::string, double> cal_cache;  
    };
  #+end_src
