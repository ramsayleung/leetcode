#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-27T22:55:01
source: https://leetcode.com/problems/merge-intervals/

Given a collection of intervals, merge all overlapping intervals.

*Example 1*:

#+begin_example
Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
#+end_example

*Example 2*:

#+begin_example
Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
#+end_example

*NOTE*: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

#+begin_src python
  from typing import List
  # time complexity: O(nlogn), time to sort intervals.
  # space complexity: O(1)
  class Solution:
      def merge(self, intervals: List[List[int]]) -> List[List[int]]:
	  size = len(intervals)
	  if size <=1:
	      return intervals
	  # sorted 
	  merged = []
	  intervals.sort(key = lambda x: x[0])
	  for interval in intervals:
	      if not merged or merged[-1][1]<interval[0]:
		  merged.append(interval)
	      else:
		  merged[-1][1] = max(merged[-1][1], interval[1])
	  return merged
                
#+end_src
