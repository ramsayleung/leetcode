#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/000
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2020-03-27]
#+TITLE: 5. Longest Palindromic Substring
#+HUGO_WEIGHT: 5
* Description
  source: https://leetcode.com/problems/longest-palindromic-substring/

  Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of =s= is 1000.

  *Example 1*:

  #+begin_example
  Input: "babad"
  Output: "bab"
  Note: "aba" is also a valid answer.
  #+end_example

  *Example 2*:

  #+begin_example
  Input: "cbbd"
  Output: "bb"
  #+end_example

* Solution 
  #+begin_src python
    # dp[i][j] = palindromic[i,j]
    # if s[i] == s[j]
    # if i==j then dp[j][j]=True
    # if i+1=j then dp[i][j]=True
    # if j - i > 1 and dp[i-1][j+1] then dp[i][j]=True

    # time complxity: O(n^2), n is the length of `s`
    # space complxity: O(n^2), n is the length of `s`
    class Solution:
	def longestPalindrome(self, s: str) -> str:
	    slen = len(s)
	    dp = [[False for x in range(slen)] for x in range(slen)]
	    left = right = 0
	    for j in range(slen):
		for i in range(j+1):
		    if s[i] == s[j]:
			if j-i > 1:
			    dp[i][j] = (i+1 < slen and j-1 >= 0 and dp[i+1][j-1])
			else:
			    dp[i][j] = True
			if dp[i][j] and j-i+1 > right - left + 1:
			    left = i
			    right = j
	    return s[left: right+1]
  #+end_src

  #+begin_src c++
    #include <vector>
    class Solution {
    public:
      string longestPalindrome(string s) {
	// time complexity: O(N * N), N is the size of S
	// space complexity: O(N * N)

	// dynamic prgramming state formula:
	// i and j is index of string s
	// f(i, j) is palindromic
	// 1. if f(i + 1, j - 1) is palindromic and Si == Sj
	// 2. if j - i =1, then f(i, j) is palindromic if Si == Sj
	int size = s.size();
	std::vector<std::vector<bool>> f(size, std::vector<bool>(size, false));

	std::string result;
	int longest = 0;
	int begin = 0;
	int end = 0;
	for (int j = 0; j < size; j++) {
	  f[j][j] = true;
	  for (int i = 0; i < j; i++) {
	    if (j - i == 1) {
	      f[i][j] = (s[i] == s[j]);
	    } else {
	      f[i][j] = f[i + 1][j - 1] && s[i] == s[j];
	    }

	    if (f[i][j] && j - i >= longest) {
	      begin = i;
	      end = j;
	      longest = j - i + 1;
	    }
	  }
	}

	return s.substr(begin, end - begin + 1);
      }
    };
  #+end_src
