#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-25T22:31:13
source: https://leetcode.com/problems/permutations/

Given a collection of *distinct* integers, return all possible permutations.

*Example*:

#+begin_example
Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
#+end_example

#+begin_src python
from typing import List


# Runtime: 32 ms, faster than 96.43% of Python3 online submissions for Permutations.
# time complexity: O(n!), n is the length of nums
# space complexity: O(n!), n is the size of permutation
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        output: List[List[int]] = []

        def backtracking(nums: List[int], permutation: List[int]) -> None:
            if len(nums) == len(permutation):
                output.append(permutation.copy())
                return
            for num in nums:
                if num not in set(permutation):
                    backtracking(nums, permutation+[num])
        backtracking(nums, [])
        return output
#+end_src

