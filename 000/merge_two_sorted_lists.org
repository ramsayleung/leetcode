#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-24T22:00:01
source: https://leetcode.com/problems/merge-two-sorted-lists/

Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

#+begin_example
Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
#+end_example

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None
  from bisect import insort


  # Runtime: 36 ms, faster than 66.49% of Python3 online submissions for Merge Two Sorted Lists.
  # time complexity: O(n1+n2), n1 is the length of l1, n2 is the length of n2
  # space complexity: O(n1+n2), n1+n2 is the size of `self.sortedList`
  class Solution:
      def __init__(self):
	  self.sortedList = []

      def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
	  self.traversal(l1)
	  self.traversal(l2)
	  root = parent = None
	  while len(self.sortedList) > 0:
	      newNode = ListNode(self.sortedList.pop(0))
	      if not parent:
		  parent = root = newNode
	      else:
		  parent.next = newNode
		  parent = parent.next
	  return root

      def traversal(self, l: ListNode) -> None:
	  while l:
	      insort(self.sortedList, l.val)
	      l = l.next

#+end_src
