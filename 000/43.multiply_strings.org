#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-03-01 äºŒ 19:27
#+TITLE: 43. Multiply String
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/000
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+HUGO_WEIGHT: 43

* Description
  source: https://leetcode.com/problems/multiply-strings/
  Given two non-negative integers =num1= and =num2= represented as strings, return the product of =num1= and =num2=, also represented as a string.

  *Note*: You must not use any built-in BigInteger library or convert the inputs to integer directly.
 

  Example 1:

  #+begin_example
  Input: num1 = "2", num2 = "3"
  Output: "6"
  #+end_example

  Example 2:

  #+begin_example
  Input: num1 = "123", num2 = "456"
  Output: "56088"
  #+end_example



  *Constraints*:

  - ~1 <= num1.length, num2.length <= 200~
  - ~num1~ and ~num2~ consist of digits only.
  - Both ~num1~ and ~num2~ do not contain any leading zero, except the number ~0~ itself.
* Solution
  A not good solution, it works(but with bad runtime complexity)

  #+begin_src c++
    #include <string>
    class Solution {
    public:
	string multiply(string num1, string num2) {
	    if (num1 == "0" || num2 == "0"){
		return "0";
	    }
	    int size1 = num1.size();
	    int size2 = num2.size();
	    auto p_str1 = num1.c_str();
	    auto p_str2 = num2.c_str();
	    std::string final_result;
	    for(int j = size2 - 1; j >=0; j--){
		std::string result;
		for(int i = size1 - 1; i>=0 ;i--){
		    int multiply_result = (p_str1[i] - '0') * (p_str2[j] - '0');
		    result = add(result, std::to_string(multiply_result) + std::string(size1 - 1 -i ,'0'));
		}
		final_result = add(final_result, result + std::string( size2 -1 -j, '0'));
	    }
	    return final_result;
	}
    
	std::string add(const std::string& num1, const std::string& num2){
	    auto p1 = num1.c_str();
	    auto p2 = num2.c_str();
	    int size1 = num1.size();
	    int size2 = num2.size();
	    int i =0, j =0 , k = 0;
	    std::string result = (size1 > size2? num1: num2);
	    auto p_res = result.c_str();
	    int carry = 0;
	    for(k = result.size() -1, i = size1 - 1, j = size2 -1; i >=0 || j >=0; i--, j--, k--){
		int add_result = 0 ;
		if (i >= 0){
		    add_result +=  p1[i] -'0';
		}
		if (j >= 0){
		    add_result += p2[j] -'0';
		}
		add_result += carry;
            
		if (add_result % 10 == add_result){
		    result[k]= '0' + add_result;
		    carry = 0;
		}else{
		    result[k] = '0' + add_result % 10 ;
		    carry = 1;
		}
	    }

	    if(carry != 0){
		result =  '1' + result;

	    }
	    return result;
	}
    };
  #+end_src
  
