#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-30 Sat 08:36
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/000
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-30 Sat 08:36]
#+TITLE: 57. Insert Interval
#+HUGO_WEIGHT: 57

* Description
  source: https://leetcode.com/problems/insert-interval/

  You are given an array of non-overlapping intervals =intervals= where ~intervals[i] = [starti, endi]~ represent the start and the end of the ~ith~ interval and ~intervals~ is sorted in ascending order by ~starti~. You are also given an interval ~newInterval = [start, end]~ that represents the start and end of another interval.

  Insert ~newInterval~ into ~intervals~ such that ~intervals~ is still sorted in ascending order by ~starti~ and ~intervals~ still does not have any overlapping intervals (merge overlapping intervals if necessary).

  Return ~intervals~ after the insertion.

  *Example 1*:

  #+begin_example
  Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
  Output: [[1,5],[6,9]]
  #+end_example

  *Example 2*:

  #+begin_example
  Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
  Output: [[1,2],[3,10],[12,16]]
  Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
  #+end_example
 

  *Constraints*:

  - ~0 <= intervals.length <= 10^4~
  - ~intervals[i].length == 2~
  - ~0 <= starti <= endi <= 10^5~
  - intervals is sorted by ~starti~ in *ascending* order.
  - ~newInterval.length == 2~
  - ~0 <= start <= end <= 10^5~
* Solution
  #+begin_src C++
    #include <algorithm>
    class Solution {
    public:
	vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
	  // Space complexity: O(N), N is the size of intervals
	  // Time complexity: O(N)
	    std::vector<std::vector<int>> merged;
	    for(auto iter = intervals.begin(); iter != intervals.end(); iter++){
		auto interval = *iter;
		//  the newInterval is less than the current interval, since the intervals is in ascending order, therefore there is no chance to have overlapping any more, just return
		if(newInterval[1] < interval[0]){
		    merged.push_back(newInterval);
		    std::copy(iter, intervals.end(), std::back_inserter(merged));
		    return merged;   
		}else if(interval[1] < newInterval[0]){
		// There is no overlapping here since the left value of newInterval is greater than the right value of interval.
		    merged.push_back(interval);
		}else{
		    // Create a new `newInterval` with maximium range.
		    newInterval = {std::min(newInterval[0], interval[0]), std::max(newInterval[1], interval[1])};
		}
	    }
        
	    merged.push_back(newInterval);
        
	    return merged;
	}
    };
  #+end_src

