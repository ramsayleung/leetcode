#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-02T15:54:54
* Description
  source: https://leetcode.com/problems/roman-to-integer/
  
  Roman numerals are represented by seven different symbols: =I=, =V=, =X=, =L=, =C=, =D= and =M=.

  #+begin_example
  Symbol       Value
  I             1
  V             5
  X             10
  L             50
  C             100
  D             500
  M             1000
  #+end_example

  For example, =2= is written as =II= in Roman numeral, just two one's added together. =12= is written as =XII=, which is simply =X + II=. The number =27= is written as =XXVII=, which is =XX + V + II=.

  Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not =IIII=. Instead, the number four is written as =IV=. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as =IX=. There are six instances where subtraction is used:

  =I= can be placed before =V= (5) and =X= (10) to make 4 and 9. 
  =X= can be placed before =L= (50) and =C= (100) to make 40 and 90. 
  =C= can be placed before =D= (500) and =M= (1000) to make 400 and 900.

  Given a roman numeral, convert it to an integer.
 

  Example 1:

  #+begin_example
  Input: s = "III"
  Output: 3
  Explanation: III = 3.
  #+end_example

  Example 2:

  #+begin_example
  Input: s = "LVIII"
  Output: 58
  Explanation: L = 50, V= 5, III = 3.
  #+end_example

  Example 3:

  #+begin_example
  Input: s = "MCMXCIV"
  Output: 1994
  Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
  #+end_example

  Constraints:

  - 1 <= =s.length= <= 15
  - s contains only the characters (='I'=, ='V'=, ='X'=, ='L'=, ='C'=, ='D'=, ='M'=).
  - It is guaranteed that s is a valid roman numeral in the range =[1, 3999]=.
* Solution
  #+begin_src c++
    #include <map>
    class Solution {
    public:
      int romanToInt(string s) {
	if (s.size() <= 0) {
	  return 0;
	}

	static std::map<char, int> roman{{'I', 1},   {'V', 5},   {'X', 10},
					 {'L', 50},  {'C', 100}, {'D', 500},
					 {'M', 1000}};

	auto p_str = s.c_str();
	int previous_value = roman[p_str[s.size() - 1]];
	int result = 0;

	for (int i = s.size() - 2; i >= 0; i--) {
	  int current_value = roman[p_str[i]];
	  if (current_value < previous_value) {
	    result += (previous_value - current_value);
	    previous_value = 0;
	  } else {
	    if (0 != previous_value) {
	      result += previous_value;
	    }
	    previous_value = current_value;
	  }
	}

	return result + previous_value;
      }
    };
  #+end_src
