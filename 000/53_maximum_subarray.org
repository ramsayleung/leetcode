#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/000
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2020-03-25]
#+TITLE: 53. Maximum Subarray
#+HUGO_WEIGHT: 53
* Description
  source: https://leetcode.com/problems/maximum-subarray/

  Given an integer array =nums=, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

  A *subarray* is a *contiguous* part of an array.

  *Example*:

  #+begin_example
  Input: [-2,1,-3,4,-1,2,1,-5,4],
  Output: 6
  Explanation: [4,-1,2,1] has the largest sum = 6.
  #+end_example

  *Follow up*:

  If you have figured out the =O(n)= solution, try coding another solution using the *divide and conquer* approach, which is more subtle.
* Solution
  #+begin_src python
    # time complxity: O(n), n is the length of nums
    # space complxity: O(1)
    from sys import maxsize
    from typing import List


    class Solution:
	def maxSubArray(self, nums: List[int]) -> int:
	    currentSum = 0
	    result = -maxsize + 1
	    for i in nums:
		currentSum = max(currentSum+i, i)
		result = max(result, currentSum)
	    return result
  #+end_src

  #+begin_src C++
    #include <vector>
    class Solution {
    public:
      int maxSubArray(vector<int>& nums) {
	// time complexity: O(N), N is the size of nums.
	// space complexity: O(N)

	// dynamic programming state transition equation:
	// who am I? f(x) = the maximum subarray ends with n[x]
	// Where did I come from? f(x) = max{f(x - 1) + nums[x], nums[x]}

	int size = nums.size();
	std::vector<int> f(size, 0);
	int sum = -0x709394;
	for(int x = 0; x< size; x++){
	  if(x > 0){
	    f[x] = std::max(f[x - 1] + nums[x], nums[x]);   
	  }else{
	    f[x] = nums[x];
	  }

	  sum = std::max(f[x], sum);
	}

	return sum;
      }
    };
  #+end_src
