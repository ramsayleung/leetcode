#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-24 Fri>
source: https://leetcode.com/problems/longest-harmonious-subsequence/

We define a harmounious array as an array where the difference between its maximum value and its minimum value is *exactly* 1.

Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.

Example 1:

#+BEGIN_EXAMPLE
Input: [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
#+END_EXAMPLE

*Note*: The length of the input array will not exceed 20,000.

#+BEGIN_SRC python
  from collections import Counter
  from typing import List


  class Solution:
      def findLHS(self, nums: List[int]) -> int:
	  counter = Counter()
	  longest = 0
	  for num in nums:
	      counter[num] += 1
	      # num as maximum value
	      if counter[num] != 0 and counter[num-1] != 0:
		  asMax = counter[num] + counter[num-1]
		  longest = max(longest, asMax)
		  # num as minimum value
	      if counter[num] != 0 and counter[num+1] != 0:
		  asMin = counter[num] + counter[num+1]
		  longest = max(longest, asMin)
	  return longest

#+END_SRC
