#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-23T12:35:27
source: https://leetcode.com/problems/minimum-index-sum-of-two-lists/

Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their *common interest* with the *least list index sum*. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

Example 1:

#+begin_example
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
#+end_example

Example 2:
#+begin_example

Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
#+end_example

*Note*:

1. The length of both lists will be in the range of [1, 1000].
2. The length of strings in both lists will be in the range of [1, 30].
3. The index is starting from 0 to the list length minus 1.
4. No duplicates in both lists.

#+begin_src python
  from collections import Counter
  from sys import maxsize
  from typing import Dict, List


  # Runtime: 148 ms, faster than 96.48% of Python3 online submissions for Minimum Index Sum of Two Lists.
  # time complexity: O(n1), n1 is the length of `list1`
  # space complexity: O(n1+n2), n1 is the size of `andyMapping`, n2 is the size of `dorisMapping`
  class Solution:
      def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:
	  commonInterest = []
	  andyMapping = {r: i for i, r in enumerate(list1)}
	  dorisMapping = {r: i for i, r in enumerate(list2)}
	  leastIndexSum = maxsize
	  for restaurant in list1:
	      if restaurant in andyMapping and restaurant in dorisMapping:
		  _sum = andyMapping[restaurant]+dorisMapping[restaurant]
		  leastIndexSum = min(leastIndexSum, _sum)
		  if _sum == leastIndexSum:
		      commonInterest.append(restaurant)
	  return commonInterest

#+end_src

