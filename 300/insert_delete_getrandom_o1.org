#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-20T13:01:58
source: https://leetcode.com/problems/insert-delete-getrandom-o1/

Design a data structure that supports all following operations in average *O(1)* time.

1. ~insert(val)~: Inserts an item val to the set if not already present.
2. ~remove(val)~: Removes an item val from the set if present.
3. ~getRandom~: Returns a random element from current set of elements. Each element must have the same *probability* of being returned.

Example:
#+begin_example

// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();
#+end_example

#+begin_src python
  from random import choice


  # Runtime: 160 ms, faster than 36.30% of Python3 online submissions for Insert Delete GetRandom O(1).
  class RandomizedSet:

      def __init__(self):
	  """
	  Initialize your data structure here.
	  """
	  self.data = {}
	  self.values = []

      def insert(self, val: int) -> bool:
	  """
	  Inserts a value to the set. Returns true if the set did not already contain the specified element.
	  """
	  isContain = val not in self.data
	  self.data[val] = len(self.values)
	  self.values.append(val)
	  return isContain

      def remove(self, val: int) -> bool:
	  """
	  Removes a value from the set. Returns true if the set contained the specified element.
	  """
	  isContain = val in self.data
	  if isContain:
	      lastElement = self.values[-1]
	      removedIndex = self.data[val]
	      self.data[lastElement] = removedIndex
	      self.values[removedIndex] = lastElement

	      del self.data[val]
	      self.values.pop(-1)
	  return isContain

      def getRandom(self) -> int:
	  """
	  Get a random element from the set.
	  """
	  return choice(self.values)

#+end_src
