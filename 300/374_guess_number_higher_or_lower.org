#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-17 日 13:09
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/300
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-17 日 13:09]
#+TITLE: 374. Guess Number Higher or Lower
#+HUGO_WEIGHT: 374

* Description
  source: https://leetcode.com/problems/guess-number-higher-or-lower/

  We are playing the Guess Game. The game is as follows:

  I pick a number from =1= to =n=. You have to guess which number I picked.

  Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

  You call a pre-defined API =int guess(int num)=, which returns three possible results:

  + =-1=: Your guess is higher than the number I picked (i.e. ~num > pick~).
  + =1=: Your guess is lower than the number I picked (i.e. ~num < pick~).
  + =0=: your guess is equal to the number I picked (i.e. ~num == pick~).

  Return the number that I picked.

  *Example 1*:

  #+begin_example
  Input: n = 10, pick = 6
  Output: 6
  #+end_example

  *Example 2*:

  #+begin_example
  Input: n = 1, pick = 1
  Output: 1
  #+end_example

  *Example 3*:

  #+begin_example
  Input: n = 2, pick = 1
  Output: 1
  #+end_example
 

  *Constraints*:

  - ~1 <= n <= 2^31 - 1~
  - ~1 <= pick <= n~
* Solution
  #+begin_src C++
    /** 
     ,* Forward declaration of guess API.
     ,* @param  num   your guess
     ,* @return 	     -1 if num is higher than the picked number
     ,*			      1 if num is lower than the picked number
     ,*               otherwise return 0
     ,* int guess(int num);
     ,*/

    class Solution {
    public:
      int guessNumber(int n) {
	// Time complexity: O(logN)
	// Space complexity: O(1)
	int low = 1;
	int high = n;
	int mid = 0;
	while(low <= high){
	  mid = low + (high - low)/2;
	  int is_lower = guess(mid);
	  if(is_lower > 0){
	    low = mid + 1;
	  }else if(is_lower < 0){
	    high = mid - 1;
	  }else{
	    return mid;
	  }
	}

	return mid;
      }
    };
  #+end_src
