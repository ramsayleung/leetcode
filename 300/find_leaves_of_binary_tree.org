#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-12 Sun>
source: https://leetcode.com/problems/find-leaves-of-binary-tree/

Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

Example:

#+begin_example
Input: [1,2,3,4,5]
  
          1
         / \
        2   3
       / \     
      4   5    

Output: [[4,5,3],[2],[1]]

 

Explanation:

1. Removing the leaves [4,5,3] would result in this tree:

          1
         / 
        2          

 

2. Now removing the leaf [2] would result in this tree:

          1          

 

3. Now removing the leaf [1] would result in the empty tree:

          []         

#+end_example
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None
  from typing import List


  # time complexity: O(n), n is the number of nodes of given tree.
  # space complexity: O(n+s), n is the number of nodes of given tree, s is the
  # size of recursive stack.
  class Solution:
      def __init__(self):
	  self.leafs = []

      def findLeaves(self, root: TreeNode) -> List[List[int]]:
	  while root:
	      leaf = []
	      # it's the root node.
	      if not self.helper(root, leaf):
		  root = None
		  self.leafs.append(leaf)
	  return self.leafs

      def helper(self, root: TreeNode, leaf: List[int]) -> None:
	  if root and not root.left and not root.right:
	      leaf.append(root.val)
	      return None
	  if root.left:
	      root.left = self.helper(root.left, leaf)
	  if root.right:
	      root.right = self.helper(root.right, leaf)
	  return root

#+end_src
