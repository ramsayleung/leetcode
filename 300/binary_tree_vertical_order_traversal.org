#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-18 Sat>
source: https://leetcode.com/problems/binary-tree-vertical-order-traversal/

Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from *left to right*.

Examples 1:

#+begin_example
Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7 

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]
#+end_example

Examples 2:

#+begin_example
Input: [3,9,8,4,0,1,7]

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7 

Output:

[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]
#+end_example

Examples 3:

#+begin_example
Input: [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5)

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2

Output:

[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]
#+end_example

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  # Runtime: 24 ms, faster than 96.69% of Python3 online submissions for Binary Tree Vertical Order Traversal.
  # time complexity: O(n), n is the number of nodes of given tree.
  # space complexity: O(n), n is the size of mapping
  class Solution:
      def verticalOrder(self, root: TreeNode) -> List[List[int]]:
	  # (root, pos)
	  queue = [(root, 0)]
	  mapping = {}
	  for node, pos in queue:
	      if node:
		  queue.append((node.left, pos-1))
		  queue.append((node.right, pos+1))
		  if pos not in mapping:
		      mapping[pos] = [node.val]
		  else:
		      mapping[pos].append(node.val)
		      result = []
	  for k in sorted(mapping): 
	      result.append(mapping[k])
	  return result

#+end_src

