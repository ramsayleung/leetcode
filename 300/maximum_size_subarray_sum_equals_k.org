#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-24T00:25:27
source: https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/

Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

*Note*:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:

#+begin_example
Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
#+end_example

Example 2:

#+begin_example
Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.
#+end_example

*follow up*:
can you do it in o(n) time?

#+begin_src python
  from typing import List


  # Runtime: 120 ms, faster than 69.21% of Python3 online submissions for Maximum Size Subarray Sum Equals k.
  # time complexity: O(n), n is the length of nums
  # space complexity: O(n), n is the size of prefix_sum
  class Solution:
      def maxSubArrayLen(self, nums: List[int], k: int) -> int:
	  length = len(nums)
	  prefix_sum = {}
	  sum = longest = 0
	  for i in range(length):
	      sum += nums[i]
	      if sum == k:
		  longest = i+1
	      elif sum - k in prefix_sum:
		  longest = max(i - prefix_sum[sum-k], longest)
	      if sum not in prefix_sum:
		  prefix_sum[sum] = i
	  return longest

#+end_src
