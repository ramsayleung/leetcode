#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/300
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2020-03-31]
#+TITLE: 322. Coin Change
#+HUGO_WEIGHT: 322
* Description
  source: https://leetcode.com/problems/coin-change/
  You are given =coins= of different denominations and a total =amount= of money. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

  *Example 1*:

  #+begin_example
  Input: coins = [1, 2, 5], amount = 11
  Output: 3 
  Explanation: 11 = 5 + 5 + 1
  #+end_example

  *Example 2*:

  #+begin_example
  Input: coins = [2], amount = 3
  Output: -1
  #+end_example

  Constraints:

  - ~1 <= coins.length <= 12~
  - ~1 <= coins[i] <= 2^31 - 1~
  - ~0 <= amount <= 10^4~
* Solution
  #+begin_src python
    from typing import List
    from sys import maxsize


    # time complexity: O(m*n), m is length of coins, n is size of amount
    # space complexity: O(n), m is length of coins, n is size of amount
    class Solution:
	def coinChange(self, coins: List[int], amount: int) -> int:
	    dp = [0] + [maxsize] * amount
	    for coin in coins:
		for i in range(coin, amount + 1):
		    dp[i] = min(dp[i - coin] + 1, dp[i])
	    return dp[amount] if dp[amount] != maxsize else -1
  #+end_src

  Updated: <2022-06-07 äºŒ>
  #+begin_src c++
    #include <vector>
    #include <algorithm>
    class Solution {
    public:
      int coinChange(vector<int>& coins, int amount) {
	// Time complexity: O(N*A), N is the size of coins, A = amount
	// Space complexity: O(A)
	int max_val = 0x709394;
	std::vector<int> f(amount + 1, max_val);
	f[0] = 0;
	std::sort(coins.begin(), coins.end());
	for(int i = 1; i<= amount; i++){
	  for(const auto &coin: coins){
	    if(i >= coin){
	      f[i] = std::min(f[i], f[i - coin] + 1);
	    }
	  }
	}
	return f[amount] == max_val ? -1: f[amount];
      }
    };
  #+end_src
