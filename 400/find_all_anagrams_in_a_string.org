#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-20T19:39:04
source: https://leetcode.com/problems/find-all-anagrams-in-a-string/

Given a string *s* and a *non-empty* string *p*, find all the start indices of *p*'s anagrams in *s*.

Strings consists of lowercase English letters only and the length of both strings *s* and *p* will not be larger than 20,100.

The order of output does not matter.

Example 1:

#+begin_example
Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
#+end_example

Example 2:

#+begin_example
Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
#+end_example

#+begin_src python
  from collections import Counter
  from typing import List


  # Runtime: 164 ms, faster than 40.65% of Python3 online submissions for Find All Anagrams in a String.
  # time complxity: O(n), n is the length of s
  # space complxity: O(3)->O(1)
  class Solution:
      def findAnagrams(self, s: str, p: str) -> List[int]:
	  lenOfPattern = len(p)
	  pattern = Counter(p)
	  result = []
	  anagrams = Counter()
	  for i in range(len(s)-lenOfPattern+1):
	      if i == 0:
		  anagrams = Counter(s[i: i+lenOfPattern])
	      else:
		  anagrams[s[i-1]] -= 1
		  if anagrams[s[i-1]] == 0:
		      del anagrams[s[i-1]]
		      anagrams[s[i-1+lenOfPattern]] += 1
	      if anagrams == pattern:
		  result.append(i)
	  return result

#+end_src
