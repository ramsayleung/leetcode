#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-05-02T14:37:52
source: https://leetcode.com/problems/path-sum-iii/

You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

*Example*:

#+begin_example
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
   *5*  *-3*
   / \    \
 *3* *2*  *11*
 / \   \
3  -2  *1*

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
#+end_example

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, val=0, left=None, right=None):
  #         self.val = val
  #         self.left = left
  #         self.right = right
  # Runtime: 936 ms, faster than 25.24% of Python3 online submissions for Path Sum III.
  # time complexity: O(N^2), N is the size of tree.
  # space complexity: O(N^2), the size of recursive stack
  class Solution:
      def __init__(self):
	  self.counter = 0
	  self.seen = set()
      def pathSum(self, root: TreeNode, sum: int) -> int:
	  if root:
	      self.recursiveSum(root, 0, sum)
	      # echo node could be root node.
	      self.pathSum(root.left, sum)
	      self.pathSum(root.right, sum)
	  return self.counter 
      def recursiveSum(self, root: TreeNode, sum: int, target: int)-> None:
	  if root:
	      sum = root.val + sum
	      if sum == target:
		  self.counter +=1
	      self.recursiveSum(root.left, sum, target)
	      self.recursiveSum(root.right, sum, target)
#+end_src
