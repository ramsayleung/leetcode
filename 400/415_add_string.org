#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-03-02 三 23:23
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-03-02 三 23:23]
#+TITLE: 415. Add Strings
#+HUGO_WEIGHT: 415
* Description
  source: https://leetcode.com/problems/add-strings/
  Given two non-negative integers, =num1= and =num2= represented as string, return the sum of =num1= and =num2= as a string.

  You must solve the problem without using any built-in library for handling large integers (such as =BigInteger=). You must also not convert the inputs to integers directly.

  Example 1:

  #+begin_example
  Input: num1 = "11", num2 = "123"
  Output: "134"
  #+end_example

  Example 2:

  #+begin_example
  Input: num1 = "456", num2 = "77"
  Output: "533"
  #+end_example

  Example 3:

  #+begin_example
  Input: num1 = "0", num2 = "0"
  Output: "0"
  #+end_example

 

  *Constraints*:

  - ~1 <= num1.length, num2.length <= 10^4~
  - ~num1~ and ~num2~ consist of only digits.
  - ~num1~ and ~num2~ don't have any leading zeros except for the zero itself.

* Solution
  #+begin_src c++
    class Solution {
    public:
      string addStrings(string num1, string num2) {
	// runtime complexity: O(N), N = max(num1.size(), num2.size())
	// space complexity: O(N), N = max(num1.size(), num2.size())
	auto p1 = num1.c_str();
	auto p2 = num2.c_str();
	int size1 = num1.size();
	int size2 = num2.size();
	int carry = 0;
	// reuse the string to reduce allocation
	std::string result = std::string(max(size1, size2), '0');

	for(int i= size1 -1,  j = size2 -1, k = result.size() -1; i>= 0 || j >=0; i --, j--, k--){
	  int add_result = 0;
	  if(i >= 0){
	    add_result += p1[i] - '0';
	  }
	  if (j>=0){
	    add_result += p2[j] - '0';
	  }
	  add_result += carry;

	  if (add_result % 10 == add_result){
	    result[k] = '0' + add_result;
	    carry = 0;
	  }else{
	    result[k] = '0' + (add_result % 10);
	    carry = 1;
	  }
	}

	if(carry > 0){
	  return '1' + result;
	}

	return result;
      }
    };
  #+end_src



