#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-03-27 日 10:37
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/2000
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-03-27 日 10:37]
#+TITLE: 2095. Delete the Middle Node of a Linked List
#+HUGO_WEIGHT: 2095

* Description
  source: https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/
  You are given the =head= of a linked list. *Delete* the *middle node*, and return the =head= of the modified linked list.

  The *middle node* of a linked list of size =n= is the =⌊n / 2⌋th= node from the *start* using *0-based indexing*, where =⌊x⌋= denotes the largest integer less than or equal to =x=.

  For =n= = =1, 2, 3, 4=, and =5=, the middle nodes are =0, 1, 1, 2=, and =2=, respectively.
 

  *Example 1*:

  [[https://assets.leetcode.com/uploads/2021/11/16/eg1drawio.png]]

  #+begin_example
  Input: head = [1,3,4,7,1,2,6]
  Output: [1,3,4,1,2,6]
  Explanation:
  The above figure represents the given linked list. The indices of the nodes are written below.
  Since n = 7, node 3 with value 7 is the middle node, which is marked in red.
  We return the new list after removing this node. 
  #+end_example

  *Example 2*:

  [[https://assets.leetcode.com/uploads/2021/11/16/eg2drawio.png]]

  #+begin_example
  Input: head = [1,2,3,4]
  Output: [1,2,4]
  Explanation:
  The above figure represents the given linked list.
  For n = 4, node 2 with value 3 is the middle node, which is marked in red.
  #+end_example

  *Example 3*:

  [[https://assets.leetcode.com/uploads/2021/11/16/eg3drawio.png]]

  #+begin_example
  Input: head = [2,1]
  Output: [2]
  Explanation:
  The above figure represents the given linked list.
  For n = 2, node 1 with value 1 is the middle node, which is marked in red.
  Node 0 with value 2 is the only node remaining after removing node 1.
  #+end_example


  *Constraints*:

  - The number of nodes in the list is in the range ~[1, 10^5]~.
  - ~1 <= Node.val <= 10^5~
* Solution
  [[file:~/code/python/leetcode/images/2000/2095-delete-the-middle-node-of-a-linked-list.png][file:~/code/python/leetcode/images/2000/2095-delete-the-middle-node-of-a-linked-list.png]]

  #+begin_src c++
    /**
     ,* Definition for singly-linked list.
     ,* struct ListNode {
     ,*     int val;
     ,*     ListNode *next;
     ,*     ListNode() : val(0), next(nullptr) {}
     ,*     ListNode(int x) : val(x), next(nullptr) {}
     ,*     ListNode(int x, ListNode *next) : val(x), next(next) {}
     ,* };
     ,*/
    class Solution {
    public:
	ListNode* deleteMiddle(ListNode* head) {
	    // Time complexity: O(1.5N) = O(N). N is the size of linked list
	    // Space complexity: O(1)
	    if(!head){
		return head;
	    }
        
	    int size = 0;
	    ListNode* first = head;
	    while(first){
		size++;
		first = first->next;
	    }
        
	    if(1 == size){
		return nullptr;
	    }
        
	    int middle = size / 2;
	    int index = 0;
	    first = head;
	    while(first){
		if(index == middle - 1){
		    // the prev node of middle node
		    first->next = first->next->next;
		    break;
		}
            
		index ++;
		first = first->next;
	    }
        
	    return head;
	}
    };
  #+end_src
