#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-10 日 13:07
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/200
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-10 日 13:07]
#+TITLE: 229. Majority Element II
#+HUGO_WEIGHT: 229

* Description
  source: https://leetcode.com/problems/majority-element-ii/

  Given an integer array of size =n=, find all elements that appear more than =⌊ n/3 ⌋= times.

  *Example 1*:

  #+begin_example
  Input: nums = [3,2,3]
  Output: [3]
  #+end_example

  *Example 2*:

  #+begin_example
  Input: nums = [1]
  Output: [1]
  #+end_example

  *Example 3*:

  #+begin_example
  Input: nums = [1,2]
  Output: [1,2]
  #+end_example
 
  *Constraints*:

  - ~1 <= nums.length <= 5 * 10^4~
  - ~-10^9 <= nums[i] <= 10^9~

  *Follow up*: Could you solve the problem in linear time and in =O(1)= space?
* Solution
  #+begin_src c++
    #include <unordered_map>
    #include <vector>
    class Solution {
    public:
      vector<int> majorityElement(vector<int> &nums) {
	// Runtime complexity: O(n). n is the size of nums.
	// Space complexity: O(n).
	std::vector<int> result;
	if (nums.size() == 0) {
	  return result;
	}

	std::unordered_map<int, int> occur;
	int threshold = nums.size() / 3;
	for (const auto &num : nums) {
	  auto iter = occur.find(num);
	  if (iter != occur.end()) {
	    iter->second++;
	  } else {
	    occur[num] = 1;
	  }

	  if (occur[num] > threshold) {
	    result.emplace_back(num);
	    // since num has been added into result, just making it impossible to be
	    // added twice.
	    occur[num] = -0x709394;
	  }
	}

	return result;
      }
    };
  #+end_src
  
