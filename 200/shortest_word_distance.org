#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-18 Sat>
source: https://leetcode.com/problems/shortest-word-distance/

Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.

Example:
#+begin_example
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “coding”, word2 = “practice”
Output: 3

Input: word1 = "makes", word2 = "coding"
Output: 1
#+end_example

*Note*:
You may assume that word1 does *not equal to* word2, and word1 and word2 are both in the list.
Accepted
91,446
Submissions

#+begin_src python
  from sys import maxsize
  from typing import List


  # Runtime: 64 ms, faster than 78.49% of Python3 online submissions for Shortest Word Distance.
  # time complexity: O(n+m), n is the length of words, m is number of occurrences
  # of word1 and word2 in words.
  # time complexity: O(n), n is the size of mapping.
  class Solution:
      def shortestDistance(self, words: List[str], word1: str, word2: str) -> int:
	  mapping = {}
	  for i, w in enumerate(words):
	      if w not in mapping:
		  mapping[w] = [i]
	      else:
		  mapping[w].append(i)
		  shortest = maxsize
	  for i in mapping[word1]:
	      for j in mapping[word2]:
		  shortest = min(shortest, abs(i-j))
	  return shortest

#+end_src
