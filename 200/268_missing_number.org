#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-10 日 14:17
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/200
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-10 日 14:17]
#+TITLE: 268. Missing Number
#+HUGO_WEIGHT: 268

* Description
  source: https://leetcode.com/problems/missing-number/

  Given an array =nums= containing n distinct numbers in the range =[0, n]=, return the only number in the range that is missing from the array.

  *Example 1*:

  #+begin_example
  Input: nums = [3,0,1]
  Output: 2
  Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
  #+end_example

  *Example 2*:

  #+begin_example
  Input: nums = [0,1]
  Output: 2
  Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
  #+end_example

  *Example 3*:

  #+begin_example
  Input: nums = [9,6,4,2,3,5,7,0,1]
  Output: 8
  Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
  #+end_example

  *Constraints*:

  - ~n == nums.length~
  - ~1 <= n <= 10^4~
  - ~0 <= nums[i] <= n~
  - All the numbers of ~nums~ are *unique*.

  *Follow up*: Could you implement a solution using only =O(1)= extra space complexity and =O(n)= runtime complexity?
* Solution
  #+begin_src c++
    #include <vector>
    class Solution {
    public:
      int missingNumber(vector<int>& nums) {
	// Time complexity: O(n), n is the size of nums.
	// Space complexity: O(1)
	int n = nums.size();
	int expected_sum = n * (n + 1) / 2.0;
	for(const auto& num: nums){
	  expected_sum -= num;
	}
	return expected_sum;
      }
    };
  #+end_src
