#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-10 日 21:12
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/200
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-10 日 21:12]
#+TITLE: 231. Power of Two
#+HUGO_WEIGHT: 231

* Description
  source: https://leetcode.com/problems/power-of-two/

  Given an integer ~n~, return ~true~ if it is a power of two. Otherwise, return ~false~.

  An integer =n= is a power of two, if there exists an integer =x= such that ~n == 2^x~.
 

  *Example 1*:

  #+begin_example
  Input: n = 1
  Output: true
  Explanation: 20 = 1
  #+end_example

  *Example 2*:

  #+begin_example
  Input: n = 16
  Output: true
  Explanation: 24 = 16
  #+end_example

  *Example 3*:

  #+begin_example
  Input: n = 3
  Output: false
  #+end_example
 

  *Constraints*:

  - ~-2^31 <= n <= 2^31 - 1~


  *Follow up*: Could you solve it without loops/recursion?
* Solution
  #+begin_src C++
    #include <bitset>
    class Solution {
    public:
      bool isPowerOfTwo(int n) {
	// Space complexity: O(33) => O(1)
	// Time complexity: O(1)
	return std::bitset<33>(n).count() == 1;
      }
    };
  #+end_src
