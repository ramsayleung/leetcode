#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-07T21:06:40
* Description
  source: https://leetcode.com/problems/search-a-2d-matrix-ii/

  Write an efficient algorithm that searches for a value target in an =m x n= integer matrix =matrix=. This =matrix= has the following properties:

  - Integers in each row are sorted in ascending from left to right.
  - Integers in each column are sorted in ascending from top to bottom.

  Example 1:

  [[https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg]]
  #+begin_example
  Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
  Output: true
  #+end_example

  Example 2:
  [[https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg]]

  #+begin_example
  Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
  Output: false
  #+end_example

  *Constraints*:

  - ~m == matrix.length~
  - ~n == matrix[i].length~
  - ~1 <= n, m <= 300~
  - ~-10**9 <= matrix[i][j] <= 10**9~
  - All the integers in each row are *sorted* in ascending order.
  - All the integers in each column are *sorted* in ascending order.
  - ~-10**9 <= target <= 10**9~
* Solution
  - runtime complexity: ~O(n * logn)~
  - space complexity: ~O(1)~

  #+begin_src c++
    class Solution {
    public:
      bool searchMatrix(vector<vector<int>>& matrix, int target) {
	for(int i = 0; i < matrix.size(); i++ ){
	  // there is no change to find target any more.
	  if (matrix[i][0] > target) {
	    return false;
	  }

	  int start = 0;
	  int end = matrix[i].size() - 1;

	  while(start <= end){
	    int medium = (start + end) / 2;
	    if (matrix[i][medium] > target){
	      end = medium - 1;
	    }else if(matrix[i][medium] < target){
	      start = medium + 1;
	    }else{
	      return true;
	    }
	  }       
	}

	return false;
      }
    };
  #+end_src
