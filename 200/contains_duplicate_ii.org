#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-17 Fri>
source: https://leetcode.com/problems/contains-duplicate-ii/

Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that *nums[i] = nums[j]* and the *absolute* difference between i and j is at most k.

Example 1:

#+begin_example
Input: nums = [1,2,3,1], k = 3
Output: true
#+end_example

Example 2:

#+begin_example
Input: nums = [1,0,1,1], k = 1
Output: true
#+end_example

Example 3:

#+begin_example
Input: nums = [1,2,3,1,2,3], k = 2
Output: false
#+end_example

#+begin_src python
  from typing import List

  # Runtime: 88 ms, faster than 90.38% of Python3 online submissions for Contains Duplicate II.
  # time complexity: O(n), n is the length of nums
  # space complexity: O(n), n is space of mapping
  class Solution:
      def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
	  mapping = {}
	  for i, num in enumerate(nums):
	      if num not in mapping:
		  mapping[num] = i
	      else:
		  if abs(mapping[num]-i) <= k:
		      return True
		  mapping[num] = i
	  return False

#+end_src
