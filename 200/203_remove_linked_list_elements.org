#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-03-24 四 21:24
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/200
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-03-24 四 21:24]
#+TITLE: 203. Remove Linked List Elements
#+HUGO_WEIGHT: 203

* Description
  Given the =head= of a linked list and an integer =val=, remove all the nodes of the linked list that has ~Node.val == val~, and return the new head.

  *Example 1*:

  [[https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg]]

  #+begin_example
  Input: head = [1,2,6,3,4,5,6], val = 6
  Output: [1,2,3,4,5]
  #+end_example

  *Example 2*:

  #+begin_example
  Input: head = [], val = 1
  Output: []
  #+end_example
  *Example 3*:

  #+begin_example
  Input: head = [7,7,7,7], val = 7
  Output: []
  #+end_example


  *Constraints*:

  - The number of nodes in the list is in the range =[0, 10^4]=.
  - ~1 <= Node.val <= 50~
  - ~0 <= val <= 50~
* Solution
  [[file:~/code/python/leetcode/images/200/203-remove-linked-list-elements.png][file:~/code/python/leetcode/images/200/203-remove-linked-list-elements.png]]

  #+begin_src c++
    /**
     ,* Definition for singly-linked list.
     ,* struct ListNode {
     ,*     int val;
     ,*     ListNode *next;
     ,*     ListNode() : val(0), next(nullptr) {}
     ,*     ListNode(int x) : val(x), next(nullptr) {}
     ,*     ListNode(int x, ListNode *next) : val(x), next(next) {}
     ,* };
     ,*/
    class Solution {
    public:
      ListNode* removeElements(ListNode* head, int val) {
	// Time complexity: O(N), N is the size of linked list
	// Space complexity: O(1)
	if(!head){
	  return head;
	}

	ListNode* prev = nullptr;
	ListNode* result = nullptr;
	while(head){
	  if(head->val == val){
	    if(prev){
	      prev->next = head->next;
	      head = head->next;
	    }else{
	      ListNode* next = head->next;
	      head->next = nullptr;
	      head = next;
	    }
	  }else{
	    prev = head;
	    head = head->next;
	  }

	  result = (result ==nullptr? prev: result);
	}

	return result;
      }
    };
  #+end_src
