#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-18 Sat>
source: https://leetcode.com/problems/shortest-word-distance-ii/

Design a class which receives a list of words in the constructor, and implements a method that takes two words word1 and word2 and return the shortest distance between these two words in the list. Your method will be called repeatedly many times with different parameters. 

Example:
#+begin_example
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “coding”, word2 = “practice”
Output: 3

Input: word1 = "makes", word2 = "coding"
Output: 1
#+end_example

Note:
You may assume that word1 does *not equal to* word2, and word1 and word2 are both in the list.

#+begin_src python
  from sys import maxsize
  from typing import List


  # Runtime: 92 ms, faster than 95.64% of Python3 online submissions for Shortest
  # Word Distance II.
  # time complexity: O(n+m), n is the length of words, m is number of occurrences
  # of word1 and word2 occurs in words.
  # time complexity: O(n), n is the size of mapping.
  class WordDistance:

      def __init__(self, words: List[str]):
	  self.mapping = {}
	  for i, w in enumerate(words):
	      if w not in self.mapping:
		  self.mapping[w] = [i]
	      else:
		  self.mapping[w].append(i)

      def shortest(self, word1: str, word2: str) -> int:
	  shortest = maxsize
	  for i in self.mapping[word1]:
	      for j in self.mapping[word2]:
		  shortest = min(shortest, abs(i-j))
	  return shortest
#+end_src
