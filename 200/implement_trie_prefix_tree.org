#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-28T23:31:37
source: https://leetcode.com/problems/implement-trie-prefix-tree/

Implement a trie with =insert=, =search=, and =startsWith= methods.

*Example*:

#+begin_example
Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
#+end_example

*Note*:

    + You may assume that all inputs are consist of lowercase letters =a-z=.
    + All inputs are guaranteed to be non-empty strings.

#+begin_src python
  # Runtime: 220 ms, faster than 34.56% of Python3 online submissions for Implement Trie (Prefix Tree).
  # time complexity:
  # insert: O(24*n)->O(n), n is the length of word.
  # search: O(24*n)->O(n), n is the length of word.
  # startsWith: O(24*n)->O(n), n is the length of word.
  # space complexity: O(n), the worst case is n, the case will be less than n.

  class Trie:

      def __init__(self):
	  """
	  Initialize your data structure here.
	  """
	  # a-z
	  self.key = "#"
	  self.children = []
	  self.isEnd = False

      def insert(self, word: str) -> None:
	  """
	  Inserts a word into the trie.
	  """
	  children = self.children
	  node = None
	  for char in word:
	      exist = False
	      for child in children:
		  if child.key == char:
		      children = child.children
		      node = child
		      exist = True
		      break
	      if not exist:
		  newTrie = Trie()
		  newTrie.key = char
		  node = newTrie
		  children.append(newTrie)
		  children = newTrie.children
	  node.isEnd = True

      def search(self, word: str) -> bool:
	  """
	  Returns if the word is in the trie.
	  """
	  node = self.searchPrefixNode(word)
	  return node and node.isEnd
    
      def searchPrefixNode(self, prefix: str):
	  children = self.children
	  node = None
	  for char in prefix:
	      exist = False
	      for child in children:
		  if child.key == char:
		      children = child.children
		      exist = True
		      node = child
		      break
	      if not exist:
		  return None
	  return node    
    
      def startsWith(self, prefix: str) -> bool:
	  """
	  Returns if there is any word in the trie that starts with the given prefix.
	  """
	  return self.searchPrefixNode(prefix)
#+end_src
