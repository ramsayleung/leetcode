#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-30 Sat 08:23
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/200
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-30 Sat 08:23]
#+TITLE: 235. Lowest Common Ancestor of a Binary Search Tree
#+HUGO_WEIGHT: 235

* Description
  source: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

  Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

  According to the [[https://en.wikipedia.org/wiki/Lowest_common_ancestor][definition of LCA on Wikipedia]]: “The lowest common ancestor is defined between two nodes p and q as the lowest node in =T= that has both =p= and =q= as descendants (where we allow *a node to be a descendant of itself*).”


  *Example 1*:

  [[https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png][https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png]]

  #+begin_example
  Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
  Output: 6
  Explanation: The LCA of nodes 2 and 8 is 6.
  #+end_example

  *Example 2*:

  [[https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png][https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png]]

  #+begin_example
  Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
  Output: 2
  Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
  #+end_example

  *Example 3*:

  #+begin_example
  Input: root = [2,1], p = 2, q = 1
  Output: 2
  #+end_example
 

  Constraints:

  - The number of nodes in the tree is in the range =[2, 10^5]=.
  - ~-10^9 <= Node.val <= 10^9~
  - All ~Node.val~ are *unique*.
  - ~p != q~
  - ~p~ and ~q~ will exist in the BST.
* Solution
  #+begin_src C++
    /**
     ,* Definition for a binary tree node.
     ,* struct TreeNode {
     ,*     int val;
     ,*     TreeNode *left;
     ,*     TreeNode *right;
     ,*     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     ,* };
     ,*/

    class Solution {
    public:
	TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
	    // Time complexity: O(LogN)
	    // Space complexity: O(1)
	    while(root){
		if(root->val > p->val && root->val> q->val){
			root = root->left;
		}else if(root->val < p->val && root->val < q->val) {
			root = root->right;
		}else{
		    return root;
		}
	    }
	    return root;
	}
    
    };
  #+end_src

