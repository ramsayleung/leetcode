#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-16 六 21:05
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/200
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-16 六 21:05]
#+TITLE: 278. First Bad Version
#+HUGO_WEIGHT: 278

* Description
  source: https://leetcode.com/problems/first-bad-version/

  You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

  Suppose you have =n= versions =[1, 2, ..., n]= and you want to find out the first bad one, which causes all the following ones to be bad.

  You are given an API =bool isBadVersion(version)= which returns whether =version= is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
 

  *Example 1*:

  #+begin_example
  Input: n = 5, bad = 4
  Output: 4
  Explanation:
  call isBadVersion(3) -> false
  call isBadVersion(5) -> true
  call isBadVersion(4) -> true
  Then 4 is the first bad version.
  #+end_example

  *Example 2*:

  #+begin_example
  Input: n = 1, bad = 1
  Output: 1
  #+end_example

  *Constraints*:

  - ~1 <= bad <= n <= 2 ^ 31 - 1~
* Solution
  #+begin_src C++
    // The API isBadVersion is defined for you.
    // bool isBadVersion(int version);

    class Solution {
    public:
	int firstBadVersion(int n) {
	    // it's similar with `git bisect` command
	    // time complexity: O(log N)
	    // space complexity: O(1)
	    int high = n;
	    int low = 1;
	    int first = 0;
	    while(low <= high){
		int mid = low + (high - low) / 2;
		bool bad = isBadVersion(mid);
		if(bad){
		    first = mid;
		    high = mid - 1;
		}else{
		    low = mid + 1;
		}
	    }
        
	    return first;
	}
    };
  #+end_src
