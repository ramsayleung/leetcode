#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-10 日 20:18
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/100
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-10 日 20:18]
#+TITLE: 191. Number of 1 Bits
#+HUGO_WEIGHT: 191

* Description
  source: https://leetcode.com/problems/number-of-1-bits/

  Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the [[https://en.wikipedia.org/wiki/Hamming_weight][Hamming weight]]).

  *Note*:

  - Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
  - In Java, the compiler represents the signed integers using [[https://en.wikipedia.org/wiki/Two%27s_complement][2's complement notation]]. Therefore, in *Example 3*, the input represents the signed integer. *-3*.
 

  *Example 1*:

  #+begin_example
  Input: n = 00000000000000000000000000001011
  Output: 3
  Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
  #+end_example

  *Example 2*:

  #+begin_example
  Input: n = 00000000000000000000000010000000
  Output: 1
  Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
  #+end_example

  *Example 3*:

  #+begin_example
  Input: n = 11111111111111111111111111111101
  Output: 31
  Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
  #+end_example

  *Constraints*:

  - The input must be a *binary string* of length =32=.

  Follow up: If this function is called many times, how would you optimize it?
* Solution
  #+begin_src C++
    #include <bitset>
    class Solution {
    public:
	int hammingWeight(uint32_t n) {
	    std::bitset<32> binary = std::bitset<32>(n);
	    return binary.count();
	}
    };
  #+end_src
