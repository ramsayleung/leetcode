#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-12T07:52:31
* Description
  source: https://leetcode.com/problems/rotate-array/

  Given an array, rotate the array to the right by =k= steps, where =k= is non-negative.

  Example 1:

  #+begin_example
  Input: nums = [1,2,3,4,5,6,7], k = 3
  Output: [5,6,7,1,2,3,4]
  Explanation:
  rotate 1 steps to the right: [7,1,2,3,4,5,6]
  rotate 2 steps to the right: [6,7,1,2,3,4,5]
  rotate 3 steps to the right: [5,6,7,1,2,3,4]
  #+end_example

  Example 2:

  #+begin_example
  Input: nums = [-1,-100,3,99], k = 2
  Output: [3,99,-1,-100]
  Explanation: 
  rotate 1 steps to the right: [99,-1,-100,3]
  rotate 2 steps to the right: [3,99,-1,-100]
  #+end_example



  *Constraints*:

  - ~1 <= nums.length <= 105~
  - ~-2^31 <= nums[i] <= 2^31 - 1~
  - ~0 <= k <= 105~



  *Follow up*:

  - Try to come up with as many solutions as you can. There are at least *three* different ways to solve this problem.
  - Could you do it in-place with =O(1)= extra space?
* Solution
  #+begin_src c++
    #include <algorithm>
	class Solution {
	public:
	  void rotate(vector<int>& nums, int k) {  
	    int size = nums.size();
	    // it will be the same nums after rotate `size` steps
	    k = k % size;
	    int end = size - k;
	    std::vector<int> left{nums.begin() + end, nums.end()};
	    std::copy(nums.begin(), nums.begin() + end, std::back_inserter(left));
	    nums = left;
	  }
	};
  #+end_src
