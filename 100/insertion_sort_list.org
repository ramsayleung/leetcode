#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-24T22:20:01
source: https://leetcode.com/problems/insertion-sort-list/

Sort a linked list using insertion sort.


#+DOWNLOADED: https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif @ 2020-04-24 22:20:37
[[file:../images/2020-04-24_22-20-37_Insertion-sort-example-300px.gif]]


A graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.
With each iteration one element (red) is removed from the input data and inserted in-place into the sorted list
 

*Algorithm of Insertion Sort*:

1. Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.
2. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.
3. It repeats until no input elements remain.


Example 1:

#+begin_example
Input: 4->2->1->3
Output: 1->2->3->4
#+end_example

Example 2:

#+begin_example
Input: -1->5->3->4->0
Output: -1->0->3->4->5
#+end_example

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  from bisect import insort

  # Runtime: 64 ms, faster than 93.50% of Python3 online submissions for Insertion Sort List.
  # time complexity: O(nlogn), logn is the time to do binary search(bisect), n is
  # time to traversal all nodes.
  # space complexity: O(n), n is the size of `self.sorted`


  class Solution:
      def __init__(self):
	  self.sorted = []

      def insertionSortList(self, head: ListNode) -> ListNode:
	  self.traversal(head)
	  parent = root = None
	  while len(self.sorted) > 0:
	      newNode = ListNode(self.sorted.pop(0))
	      if not parent:
		  parent = root = newNode
	      else:
		  parent.next = newNode
		  parent = parent.next
	  return root

      def traversal(self, head: ListNode) -> None:
	  while head:
	      insort(self.sorted, head.val)
	      head = head.next

#+end_src
