#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-06-18 六 22:12
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/100
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-06-18 六 22:12]
#+TITLE: 119. Pascal's Triangle II
#+HUGO_WEIGHT: 119

* Description
  source: https://leetcode.com/problems/pascals-triangle-ii/

  Given an integer ~rowIndex~, return the ~rowIndexth~ (*0-indexed*) row of the *Pascal's triangle*.

  In *Pascal's triangle*, each number is the sum of the two numbers directly above it as shown:

  [[https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif]]

  *Example 1*:

  #+begin_example
  Input: rowIndex = 3
  Output: [1,3,3,1]
  #+end_example
  *Example 2*:

  #+begin_example
  Input: rowIndex = 0
  Output: [1]
  #+end_example

  *Example 3*:

  #+begin_example
  Input: rowIndex = 1
  Output: [1,1]
  #+end_example


  *Constraints*:

  - ~0 <= rowIndex <= 33~


  *Follow up*: Could you optimize your algorithm to use only =O(rowIndex)= extra space?
* Solution
  #+begin_src C++
    #include <vector>
    class Solution {
    public:
      vector<int> getRow(int rowIndex) {
	// time complexity: O(N * N), N is rowIndex.
	// space complexity: O(N)

	std::vector<int> result(rowIndex + 1, 0);
	result[0] = 1;

	for(int i = 1; i<= rowIndex; i++){
	  // This is keypoint.
	  // Because result[j] will be used twice, we need to keep track of it after setting a new value to result[j]
	  int prev = 0;
	  for(int j = 0; j <= i; j++){
	    int tmp = result[j];
	    result[j] = result[j] + prev;
	    prev = tmp;
	  }
	}

	return result;
      }
    };
  #+end_src
