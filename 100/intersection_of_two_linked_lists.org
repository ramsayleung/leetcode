#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-28T01:25:23
source: https://leetcode.com/problems/intersection-of-two-linked-lists/

Write a program to find the node at which the intersection of two singly linked lists begins.

For example, the following two linked lists:


#+DOWNLOADED: https://assets.leetcode.com/uploads/2018/12/13/160_statement.png @ 2020-04-28 09:56:28
[[file:../images/2020-04-28_09-56-28_160_statement.png]]


begin to intersect at node c1.

*Example 1*:


#+DOWNLOADED: https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png @ 2020-04-28 09:56:39
[[file:../images/2020-04-28_09-56-39_160_example_1.png]]


#+begin_example
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
#+end_example

*Example 2*:


#+DOWNLOADED: https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png @ 2020-04-28 09:56:54
[[file:../images/2020-04-28_09-56-54_160_example_2.png]]


#+begin_example
Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Reference of the node with value = 2
Input Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
#+end_example

*Example 3*:


#+DOWNLOADED: https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png @ 2020-04-28 09:57:04
[[file:../images/2020-04-28_09-57-04_160_example_3.png]]


#+begin_example
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: null
Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
#+end_example

*Notes*:

    + If the two linked lists have no intersection at all, return *null*.
    + The linked lists must retain their original structure after the function returns.
    + You may assume there are no cycles anywhere in the entire linked structure.
    + Your code should preferably run in O(n) time and use only O(1) memory.

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None
  # time complexity: O(A+B), A is the length of headA, B is the length of headB
  # space complexity: O(A), A is the size of seen set.
  class Solution:
      def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
	  seen = set()
	  head = headA
	  while head:
	      seen.add(head)
	      head = head.next
	  head = headB
	  while head:
	      if head in seen:
		  return head
	      head = head.next
	  return None
#+end_src
