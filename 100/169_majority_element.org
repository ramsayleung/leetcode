#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-28T12:51:07
* Description
  source: https://leetcode.com/problems/majority-element/

  Given an array of size n, find the majority element. The majority element is the element that appears *more than* =⌊ n/2 ⌋= times.

  You may assume that the array is non-empty and the majority element always exist in the array.

  *Example 1*:

  #+begin_example
  Input: [3,2,3]
  Output: 3
  #+end_example

  *Example 2*:

  #+begin_example
  Input: [2,2,1,1,1,2,2]
  Output: 2
  #+end_example
* Solution
  #+begin_src python
    from collections import Counter
    # Runtime: 164 ms, faster than 95.69% of Python3 online submissions for Majority Element.
    # time complexity: O(n), n is the length of nums
    # space complexity: O(n), n is the size of counter
    class Solution:
	def majorityElement(self, nums: List[int]) -> int:
	    counter = Counter(nums)
	    majority = counter.most_common(1)[0][0]
	    return majority
  #+end_src

  #+begin_src c++
    class Solution {
    public:
      int majorityElement(vector<int>& nums) {
	// https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm
	// Runtime complexity: O(N), N is the size of nums.
	// Space complexity: O(1)
	int candidate = 0x709394;
	int count = 1;
	for(const auto& num: nums){
	  if(candidate == num){
	    count ++;
	  }else{
	    count --;
	  }

	  if(0 == count){
	    candidate = num;
	    count = 1;
	  }
	}

	return candidate;
      }
    };
  #+end_src
