#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-28T09:04:58
#+OPTIONS: author:nil ^:{}
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/100
#+HUGO_CUSTOM_FRONT_MATTER: :toc true
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-02-26 å…­ 20:21]
#+TITLE: 141. Linked list cycle
#+HUGO_TAGS: linked_list
#+HUGO_CATEGORIES: linked_list


* Description
  source: https://leetcode.com/problems/linked-list-cycle/

  Given a linked list, determine if it has a cycle in it.

  To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

  *Example 1*:

  #+begin_example
  Input: head = [3,2,0,-4], pos = 1
  Output: true
  Explanation: There is a cycle in the linked list, where tail connects to the second node.
  #+end_example


  #+DOWNLOADED: https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png @ 2020-04-28 09:55:15
  [[file:../images/2020-04-28_09-55-10_circularlinkedlist.png]]

  *Example 2*:

  #+begin_example
  Input: head = [1,2], pos = 0
  Output: true
  Explanation: There is a cycle in the linked list, where tail connects to the first node.
  #+end_example


  #+DOWNLOADED: https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png @ 2020-04-28 09:55:28
  [[file:../images/2020-04-28_09-55-28_circularlinkedlist_test2.png]]


  *Example 3*:

  #+begin_example
  Input: head = [1], pos = -1
  Output: false
  Explanation: There is no cycle in the linked list.
  #+end_example


  #+DOWNLOADED: https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png @ 2020-04-28 09:55:41
  [[file:../images/2020-04-28_09-55-41_circularlinkedlist_test3.png]]
 

  *Follow up*:

  Can you solve it using O(1) (i.e. constant) memory?
* Solution
  #+begin_src python
    # Definition for singly-linked list.
    # class ListNode:
    #     def __init__(self, x):
    #         self.val = x
    #         self.next = None
    # time complexity: O(n), n is the length of linkedList
    # space complexity: O(n), n is the size of seen set.
    class Solution:
	def hasCycle(self, head: ListNode) -> bool:
	    seen = set()
	    while head:
		if head in seen:
		    return True
		seen.add(head)
		head = head.next
	    return False
  #+end_src

  #+begin_src c++
    /**
     ,* Definition for singly-linked list.
     ,* struct ListNode {
     ,*     int val;
     ,*     ListNode *next;
     ,*     ListNode(int x) : val(x), next(NULL) {}
     ,* };
     ,*/
    class Solution {
    public:
      bool hasCycle(ListNode *head) {
	// Runtime complexity: O(n); n is the size of linked_list
	// Space complexity: O(1)
	if(!head){
	  return false;
	}

	ListNode* fast = head -> next;
	while(head){
	  // if the fast pointer meets the slow pointer, there is a cycle
	  if (fast == head){
	    return true;
	  }

	  if(fast && fast ->next){
	    fast = fast->next->next;
	  } else{
	    // if there is a cycle, the fast-> next will never be null
	    return false;
	  }  

	  head = head->next;
	}

	return false;
      }
    };
  #+end_src
