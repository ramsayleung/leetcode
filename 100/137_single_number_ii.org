#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-04-30 Sat 21:32
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/100
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-04-30 Sat 21:32]
#+TITLE: 137. Single Number II
#+HUGO_WEIGHT: 137

* Description
  source: https://leetcode.com/problems/single-number-ii/

  Given an integer array =nums= where every element appears *three times* except for one, which appears *exactly once*. Find the single element and return it.

  You must implement a solution with a linear runtime complexity and use only constant extra space.

  *Example 1*:

  #+begin_example
  Input: nums = [2,2,3,2]
  Output: 3
  #+end_example

  *Example 2*:

  #+begin_example
  Input: nums = [0,1,0,1,0,1,99]
  Output: 99
  #+end_example


  *Constraints*:

  - ~1 <= nums.length <= 3 * 10^4~
  - ~-2^31 <= nums[i] <= 2^31 - 1~
  - Each element in nums appears exactly *three times* except for one element which appears *once*.
* Solution
  [[file:~/code/python/leetcode/images/100/137-single-number-ii.png][file:~/code/python/leetcode/images/100/137-single-number-ii.png]]
  #+begin_src C++
    class Solution {
    public:
      int singleNumber(vector<int>& nums) {
	// Space complexity: O(1)
	// Time complexity: O(32N) => O(N)
	int result = 0;
	for(int i = 0; i < 32; i++){
	  int sum = 0;
	  for(const auto& num: nums){
	    sum += (num >> i)&1;
	  }
	  sum %= 3;
	  result |= (sum << i);
	}
	return result;
      }
    };
  #+end_src
