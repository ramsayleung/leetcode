#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-06-12 日 22:42
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/100
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-06-12 日 22:42]
#+TITLE: 118. Pascal's Triangle
#+HUGO_WEIGHT: 118

* Description
  source: https://leetcode.com/problems/pascals-triangle/

  Given an integer =numRows=, return the first numRows of *Pascal's triangle*.

  In *Pascal's triangle*, each number is the sum of the two numbers directly above it as shown:

  [[https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif]]

  *Example 1*:

  #+begin_example
  Input: numRows = 5
  Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
  #+end_example

  *Example 2*:

  #+begin_example
  Input: numRows = 1
  Output: [[1]]
  #+end_example
 

  *Constraints*:

  - ~1 <= numRows <= 30~
* Solution
  #+begin_src C++
    #include <vector>
    class Solution {
    public:
      vector<vector<int>> generate(int numRows) {
	// time complexity: O(N)
	// space complexity: O(N)
	std::vector<std::vector<int>> result;
	for(int i = 0; i< numRows; i++){
	  if(i < 2){
	    result.push_back(std::vector<int>(i + 1, 1));
	  }else{
	    std::vector<int> prev = result.back();
	    std::vector<int> cur{1};
	    for(int k = 0; k < prev.size() -1; k++){
	      cur.push_back(prev[k] + prev[k+1]);
	    }
	    cur.push_back(1);
	    result.push_back(cur);
	  }
	}

	return result;
      }
    };
  #+end_src
