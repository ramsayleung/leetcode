#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-05-03 Tue 09:01
#+HUGO_BASE_DIR: ~/code/org/leetcode_book
#+HUGO_SECTION: docs/100
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-05-03 Tue 09:01]
#+TITLE: 167. Two Sum II - Input Array Is Sorted
#+HUGO_WEIGHT: 167

* Description
  source: https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

  Given a *1-indexed* array of integers ~numbers~ that is already sorted in *non-decreasing order*, find two numbers such that they add up to a specific ~target~ number. Let these two numbers be ~numbers[index1]~ and ~numbers[index2]~ where ~1 <= index1 < index2 <= numbers.length~.

  Return the indices of the two numbers, ~index1~ and ~index2~, *added by one* as an integer array ~[index1, index2]~ of length 2.

  The tests are generated such that there is *exactly one solution*. You *may not* use the same element twice.

  Your solution must use only constant extra space.

  *Example 1*:

  #+begin_example
  Input: numbers = [2,7,11,15], target = 9
  Output: [1,2]
  Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
  #+end_example

  *Example 2*:

  #+begin_example
  Input: numbers = [2,3,4], target = 6
  Output: [1,3]
  Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
  #+end_example

  *Example 3*:

  #+begin_example
  Input: numbers = [-1,0], target = -1
  Output: [1,2]
  Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
  #+end_example


  *Constraints*:

  - ~2 <= numbers.length <= 3 * 10^4~
  - ~-1000 <= numbers[i] <= 1000~
  - numbers is sorted in *non-decreasing order*.
  - ~-1000 <= target <= 1000~
  - The tests are generated such that there is exactly *one solution*.
* Solution
  #+begin_src C++
    #include <algorithm>
    class Solution {
    public:
      vector<int> twoSum(vector<int>& numbers, int target) {
	// Space complexity: O(1)
	// Time complexity: O(N)
	int low = 0;
	int high = numbers.size() - 1;
	while(numbers[low] + numbers[high] != target){
	  if(numbers[low] + numbers[high] < target){
	    low ++;
	  }else{
	    high--;
	  }
	}

	std::vector<int> result{low + 1, high + 1};
	return result;
      }
    };
  #+end_src

