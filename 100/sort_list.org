#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2020-04-24T22:14:25
source: https://leetcode.com/problems/sort-list/

Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

#+begin_example
Input: 4->2->1->3
Output: 1->2->3->4
#+end_example

Example 2:

#+begin_example
Input: -1->5->3->4->0
Output: -1->0->3->4->5
#+end_example

#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None
  from bisect import insort


  # Runtime: 232 ms, faster than 66.03% of Python3 online submissions for Sort List.
  # time complexity: O(nlogn), logn is the time to do binary search(bisect), n is
  # time to traversal all nodes.
  # space complexity: O(n), n is the size of `self.sorted`
  class Solution:
      def __init__(self):
	  self.sorted = []

      def sortList(self, head: ListNode) -> ListNode:
	  self.traversal(head)
	  parent = root = None
	  while len(self.sorted) > 0:
	      newNode = ListNode(self.sorted.pop(0))
	      if not parent:
		  parent = root = newNode
	      else:
		  parent.next = newNode
		  parent = parent.next
	  return root

      def traversal(self, head: ListNode) -> None:
	  while head:
	      insort(self.sorted, head.val)
	      head = head.next
#+end_src
