#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-12 Sun>

source: https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/

Given a binary tree

#+begin_src c++

  struct Node {
    int val;
    Node *left;
    Node *right;
    Node *next;
  }

#+end_src
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

*Follow up*:

1. You may only use constant extra space.
2. Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.

Example 1:

#+DOWNLOADED: https://assets.leetcode.com/uploads/2019/02/15/117_sample.png @ 2020-04-12 12:07:00
[[file:../images/2020-04-12_12-07-00_117_sample.png]]


#+begin_example
Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
#+end_example

#+begin_src python
  """
  # Definition for a Node.
  class Node:
      def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
	  self.val = val
	  self.left = left
	  self.right = right
	  self.next = next
  """


  # I solve this problem with level order traversal, which make no difference
  # between this problem and problem 116.
  # time complexity: O(n), n is the number of nodes of given tree.
  # space complexity: O(Ln), Ln is the number of lowest level, which is the size of help queue.

  class Solution:
      def connect(self, root: 'Node') -> 'Node':
	  queue = [root]
	  while len(queue) > 0:
	      size = len(queue)
	      for i in range(size):
		  node = queue.pop(0)
		  if i < size-1:
		      node.next = queue[0]
		  if node and node.left:
		      queue.append(node.left)
		  if node and node.right:
		      queue.append(node.right)
	  return root
#+end_src
