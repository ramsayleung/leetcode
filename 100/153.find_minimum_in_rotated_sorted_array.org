#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-02-06T22:39:26
* Description
  source: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

  Suppose an array of length =n= sorted in ascending order is rotated between =1= and =n= times. For example, the array nums = =[0,1,2,4,5,6,7]= might become:

  - =[4,5,6,7,0,1,2]= if it was rotated 4 times.
  - =[0,1,2,4,5,6,7]= if it was rotated 7 times.

  Notice that rotating an array =[a[0], a[1], a[2], ..., a[n-1]]= 1 time results in the array =[a[n-1], a[0], a[1], a[2], ..., a[n-2]]=.

  Given the sorted rotated array nums of unique elements, return the minimum element of this array.

  You must write an algorithm that runs in =O(log n)= time.

 

  Example 1:

  #+begin_example
  Input: nums = [3,4,5,1,2]
  Output: 1
  Explanation: The original array was [1,2,3,4,5] rotated 3 times.
  #+end_example

  Example 2:

  #+begin_example
  Input: nums = [4,5,6,7,0,1,2]
  Output: 0
  Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
  #+end_example

  Example 3:

  #+begin_example
  Input: nums = [11,13,15,17]
  Output: 11
  Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
  #+end_example

  *Constraints*:

  - =n == nums.length=
  - =1 <= n <= 5000=
  - =-5000 <= nums[i] <= 5000=
  - All the integers of nums are *unique*.
  - nums is sorted and rotated between =1= and =n= times.
* Solution
  #+begin_src c++
    class Solution {
    public:
      int findMin(vector<int>& nums) {
	int first = nums[0];
	int start = 0;
	int end  = nums.size() - 1;
	int min_value = first;

	while(start <= end){
	  int medium = (start + end) / 2;
	  if(nums[medium] < first){
	    end = medium - 1;
	  }
	  else {
	    start = medium + 1;
	  }    
	  min_value = min(nums[medium], min_value);
	}
	return min_value;
      }
    };
  #+end_src
