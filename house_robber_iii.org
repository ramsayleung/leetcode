#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+DATE: <2020-04-14 Tue>
The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:

#+begin_example
Input: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1
#+end_example

Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

Example 2:

#+begin_example
Input: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.
#+end_example

#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  from typing import Dict


  # time complexity: O(n), n is the number of nodes of given tree.
  # space complexity: O(n+s), n is the size of `node_amount_mapping`, s is the
  # size of recursive stack.
  class Solution:
      def rob(self, root: TreeNode) -> int:
	  return self.rob_with_map(root, {})

      def rob_with_map(self, root: TreeNode, node_amount_mapping: Dict[TreeNode, int]) -> int:
	  if not root:
	      return 0
	  if root in node_amount_mapping:
	      return node_amount_mapping[root]
	  val = 0
	  if root.left:
	      val += self.rob_with_map(root.left.left, node_amount_mapping) + \
		  self.rob_with_map(root.left.right, node_amount_mapping)
	  if root.right:
	      val += self.rob_with_map(root.right.left, node_amount_mapping) + \
		  self.rob_with_map(root.right.right, node_amount_mapping)
	      val = max(val+root.val, self.rob_with_map(root.left, node_amount_mapping) +
			self.rob_with_map(root.right, node_amount_mapping))
	      node_amount_mapping[root] = val
	  return val

#+end_src
